import json
import logging
import google.generativeai as genai
from dotenv import load_dotenv
import os
from .vector_store import vector_store  # Import vector store

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Load API key from environment
load_dotenv()
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

def retrieve_relevant_questions(vector_store, resume, job_description, top_k=200, skills=None, experience_level="mid", domains=None, force_category=None):
    if not vector_store:
        logger.error("Vector store is None")
        return []
    
    try:
        resume_data = json.loads(resume) if resume.startswith("{") else {"content": resume}
        job_data = json.loads(job_description)
        resume_content = resume_data.get("summary", resume_data.get("content", ""))
        jd_content = job_data.get("description", "")
    except json.JSONDecodeError:
        logger.error("Failed to parse resume or job description as JSON")
        return []
    
    # Use Gemini to generate a query for similarity search
    model_to_use = "models/gemini-2.5-flash"
    if model_to_use not in [m.name for m in genai.list_models()]:
        logger.error("Gemini-2.5-flash model not available")
        return []
    
    query_prompt = f"""Based on the following resume and job description, generate a concise query string (up to 50 words) summarizing the key technical skills, job role, and relevant context for retrieving interview questions. Include the category '{force_category}' if specified. Do not include generic terms like "data" or "software" unless they are specific tools.

Resume: {resume_content}
Job Description: {jd_content}
Category: {force_category or 'any'}"""
    
    try:
        response = genai.GenerativeModel(model_to_use).generate_content(query_prompt)
        query = response.text.strip()
        if not query:
            raise ValueError("Empty query generated by Gemini")
        logger.info(f"Gemini-generated query for similarity search: {query}")
    except Exception as e:
        logger.warning(f"Failed to generate query with Gemini: {str(e)}. Falling back to word frequency analysis.")
        skills_str = ', '.join(skills) if skills else ', '.join(resume_data.get('skills', []) + job_data.get('skills_required', []))
        domains_str = ', '.join(domains) if domains else ''
        query = (
            f"Skills: {skills_str} "
            f"Job Role: {resume_data.get('job_title', '') or job_data.get('title', '')} "
            f"Experience Level: {experience_level} "
            f"Domains: {domains_str} "
            f"Category: {force_category or 'any'}"
        )
        logger.info(f"Fallback query for similarity search: {query}")
    
    try:
        relevant_docs = vector_store.similarity_search(query, k=top_k)
        logger.info(f"Retrieved {len(relevant_docs)} documents from vector store for category: {force_category or 'any'}")
    except Exception as e:
        logger.error(f"Vector store similarity search failed: {str(e)}")
        return []
    
    questions = []
    for doc in relevant_docs:
        if '"question":' in doc.page_content and '"category":' in doc.page_content:
            try:
                question_data = json.loads(doc.page_content)
                category = question_data.get("category", "").lower().strip()
                if question_data.get("question"):
                    if force_category is None or category == force_category.lower():
                        questions.append({
                            "question": question_data.get("question", ""),
                            "category": category,
                            "tags": question_data.get("tags", []) 
                        })
            except json.JSONDecodeError:
                logger.error(f"Failed to parse document content: {doc.page_content}")
                continue
    
    logger.info(f"Filtered {len(questions)} questions for category: {force_category or 'any'}")
    return questions